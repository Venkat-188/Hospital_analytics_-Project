< module -> Hello
< module -> "hello"
module -> "Hello"
< Name -> "Venkat"
Name -> "Venkat"
Name -> "Venkat"
print(Name)
print("Hello welcome R programming")
24+28
sum1-<10+14
sum1<-10+14
print(sum1)
print("Hello Venkat")
24+15
sum<- 20+29
sum1<- 20+28
sum
print(sum1)
v1 <- c(1,2,3,4,5)
v2 <- c("Red", "Blue", "Green")
v1
v2
print v1 class:
print v1 class
class v1
class (v1)
class (v2)
v3 <- C(5j, 8j)
v3 <- 5j, 8j
name = c("Venkat", "Rajesh", "Babu", "Teja")
name
class(name)
age <- c(22, 26,28,32)
children <- c(False, TRUE, True, False)
children <- c(FALSE, TRUE, TRUE, FALSE)
df <- data.frame(name, age, chuldren)
df <- data.frame(name, age, children)
df
df <- data.frame(Name=name, Age=age, Children=children)
df
str(df)
df [3,3]
df [2,1]
df [2, Name]
df [2, name]
df
df [2, Name]
df [2,"Age"]
df[3, ]
df[2,]
x = 30L
typeof(x)
if(is.integer){print("x is an integer")}
if(is.integer(x)){print("x is an integer")}
Vscore <- 50
if (Vscore > 80){print("It's a good score")}
else {print("It's not a good score")}
else {print("It's not a good score")}
else {print("It's not a good score")}
else {
else {
score  <-60
if (score > 80){print("It's a good score")}
else{print("It's not a good score")}
if (score > 80){print("It's a good score")} else {print("It's not a good score")}
Rajesh <- 80
Venkat <- 75
if(Rajesh > Venkat){print("rajesh scored highest marks")} esle {print("venkat scores highest marks")}
Venkat <- 75
if(80 > 75){print("rajesh scored highest marks")} esle {print("venkat scores highest marks")}
Venkat <- 75
if (80 > 75){print("rajesh scored highest marks")} esle {print("venkat scores highest marks")}
V = c("Hello World")
cont <-2
while (count < 5){print(V)}
while (count < 5){print(V)
count = count+1 }
V = ("Hello World")
count <-2
while (count < 5){print(V)}
V <- ("Hello World")
count <-2
while (count < 5){print(V)
count = count+1}
while (count < 9){print(V)
count = count+1}
while (count < 2){print(V)
count = count+1}
while (count < 4){print(V)
count = count+1}
names <- c('Venkat', 'Rajesh0', 'Babu', 'Teja')
names
typeof(names)
for (i in names){print}
for (i in names){print}
for (i in names){print
names}
(i)}
names
for (i in names){
print(i)}
x <- 25
x > 20
x < 15
load("~/.RData")
x == 25
x != 25
x < 20 & x > 10
x > 20 & (x < 26) (x == 25)
x > 20 & (x < 26) & (x == 25)
x <- 0
while (x < 10){
cat ('x is currently:', x)
print( 'x is still less than 10, adding 1 to x')
x <- x + 1
if x == 0 {
if x == 0 {
if (x == 0) {
print("x is equal to 10! loop terminating loop")}
hello_world <- function(){
print('hello world in R!')
}
hello_world()
hello_name <- function(name){
print(paste('hello ', name))
}
hello_name('John')
add_num <- function(num1, num2){
print(num1+num2)
}
add_num(40,40)
add_num(c(10,20,30),5)
print('Hello ', name)
hi_name <- function(name = 'Venkat'){
print('Hello ', name)
}
hi_name()
hi_name <- function(name = 'Venkat'){
print(paste('Hello ', name))
}
hi_name()
hi_name('Teja')
full_name <- function(Sur='Jada',name='Venakt'){
reverse(paste(Sur' 'name))
reverse(paste(Sur,' ',name))
retrun(paste(Sur,' ',name))
return(paste(Sur,' ',name))
return(paste(sur,' ',name))
full_name <- function(sur_name='Jada',name='Venakt'){
return(paste(sur_name,' ',name))
}
full_name()
normalDist <- rnorm(1000,0,1)
mean(normalDist)
hist(normalDist)
hist(normalDist)
hist(normalDist, breaks = 50)
hist(normalDist, breaks = 60)
seq(1,10, by=2)
seq(1,10, by=1)
seq(1,10, by=3)
sort(v)
sort(V)
> v <- c(11,4,5,7,3,10,2)
v <- c(11,4,5,7,3,10,2)
sort(V)
V <- c(11,4,5,7,3,10,2)
sort(V)
V1 <- c(6,5,4,3,2,1)
rev(V)
V1 <- c(6,5,4,3,2,1)
rev(V)
rev(V1)
V2 <- c(1,2,3,4,5)
V3 <- c(6,7,8,9,10)
append(V2, V3)
abs(-6)
sqrt(30)
sqrt(25)
v <- c(1,2,3,4,5)
sum(v)
V <- c(4,8,4,8)
sum(V)
floor(6.88)
exp(4)
v <- c(1,2,3,4,5)
mean(v)
text <- "R is an computer programming language"
grepl('computer', text)
text <- "R is an computer programming language"
grepl('Comprehensive', text)
v <- c('a', 'b', 'c', 'd')
grep('c' v)
grep('c',v)
grep('a', v)
source("~/.active-rstudio-document")
install.packages("dplyr")
library(dplyr)
install.packages("nycflights13")
library(nycflights13)
View(flights)
head(flights)
f1 <- filter(flights,month==07)
View(f1)
f2 <- filter(flights,month==07,day==3)
View(f2)
view(filter(flights,month==08,day==4,origin=='LGA'))
View(filter(flights,month==08,day==4,origin=='LGA'))
head(flights[flights$month==05, & flights$day==3, & flights$origin=='LGA'])
head(flights[flights$month==05 & flights$day==3 & flights$origin=='LGA',])
slice(flights,1:5)
slice(flights,5:10)
wide <- data.frame(
ID = c(1:n)
Face.1 = (411,512,615,215,852)
wide <- data.frame(
ID = c(1:n),
Face.1 = (411,512,615,215,852)
wide <- data.frame(
ID = c(1:n),
Face.1 = c411,512,615,215,852)
wide <- data.frame(
plot(UScereal$sugars,UScereal$calories)
install.packages("datasets")
plot(ChickWeight)
#base graphics
library(MASS)
plot(UScereal$sugars,UScereal$calories)
title("plot(UScereal$sugars,UScereal$calories)")
x <- UScereal$sugars
y <- UScereal$calories
library(grid)
#grid graphics
pushViewport(plotViewport())
push.viewport(dataViewport(x,y))
pushViewport(dataViewport(x,y))
grid.rect()
grid.xaxis()
grid.yaxis()
grid.points(x,y)
grid.text("UScereal$calories", x = unit(-3, "lines"), rot = 90)
grid.text("UScereal$sugars", y = unit(-3, "lines"), rot = 0)
pop.viewport(2)
x >- c(33, 45, 70, 110)
pie(x,labels
x <- c(33, 45, 70, 110)
x <- c(33, 45, 70, 110)
labels <- c("Soap", "Detergent", "Oil", "Shampoo")
pie(x,labels
pie(x,labels)
pie(x, labels)
pie(x, labels, main = "City pie chart", col = rainbow(length(x)))
Piepercent<- round(100*x/sum(x),1)
Pie(x, labels = Piepercent, main="City pie chart", col = rainbow(length(x)))
pie(x, labels = Piepercent, main="City pie chart", col = rainbow(length(x)))
install.packages("plotrix")
library(plotrix)
x <- c(33, 45, 70,110)
lbl <- c("Soap", "Detergent", "Oil", "Shampoo")
pie3D(x, labels = lbl, explode = 0.1, main = "pie chart of countries ")
v <- c(9,13,21,18,15,45,8,14,56,64,25)
hist(v,xlab = "weight", col = "green", border = "red")
hist(v,xlab = "weight", col = "green", border = "red", xlim = c(0,40), ylim = c(0,5),
breaks = 5)
data("airquality")
View(airquality)
plot(airquality$Ozone, airquality$Wind)
plot(airquality$Ozone, airquality$Wind, col = 'red')
plot(airquality$Ozone, airquality$Wind, type = 'h', col = 'blue') #Histogram
plot(airquality)
# Assign labels to the plot
plot(airquality$Ozone, xlab = 'ozone concentration', ylab = 'No of Instances', main = 'ozone levels in NY city', col = 'green')
hist(airquality$Solar.R)
hist(airquality$Solar.R, main = 'Soalr Radiation values in air', xlab = 'Solar rad.')
Temperature <- airquality$Temp
hist(Temperature)
h <- hist(Temperature, ylim = c(0,40))
text(h$mids, h$counts, labels=h$counts, adj=c(0.5, -0.5))
hist(Temperature,
main = "Maximum daily temprature at La Guardia Airport",
xlab = "Temprature in degrees Fahrenheit",
xlim = c(50,100),
col = "chocolate",
border = "brown",
breaks = c(55,60,70,75,80,100)
)
boxplot(airquality$Solar.R)
boxplot(airquality[,0:4], main ='Multiple box plots')
install.packages("ggplot2")
library(ggplot2)
attach(mtcars)
p1 <- ggplot(mtcars, aes(factor(cy1), mpg))
p1 + geom_boxplot()
p1 + geom_boxplot() + coord_flip()
p1 + geom_boxplot(es(fill = factor(cy1)))
p1 <- ggplot(mtcars, aes(factor(cyl),mpg))
p1 + geom_boxplot()
p1 + geom_boxplot() + coord_flip()
p1 + geom_boxplot(es(fill = factor(cyl)))
p1 + geom_boxplot(es(fill = factor(cyl)))
p1 + geom_boxplot(aes(fill = factor(cyl)))
# Summary of data
print(summary(data))
# Load ggplot2
library(ggplot2)
# Plot SMS vs NoShow
ggplot(data, aes(x = factor(SMS_Sent), fill = NoShow)) +
geom_bar(position = "dodge") +
labs(title = "Effect of SMS Reminders on No-Shows", x = "SMS Sent", fill = "NoShow") +
theme_minimal()
# Plot SMS vs NoShow
ggplot(predictions, aes(x = factor(SMS_Sent), fill = NoShow)) +
geom_bar(position = "dodge") +
labs(title = "Effect of SMS Reminders on No-Shows", x = "SMS Sent", fill = "NoShow") +
theme_minimal()
# Plot SMS vs NoShow
ggplot(predictions, aes(x = factor(SMS_Sent), fill = NoShow)) +
geom_bar(position = "dodge") +
labs(title = "Effect of SMS Reminders on No-Shows", x = "SMS Sent", fill = "NoShow") +
theme_minimal()
# Plot SMS vs NoShow
ggplot(data, aes(x = factor(SMS_Sent), fill = NoShow)) +
geom_bar(position = "dodge") +
labs(title = "Effect of SMS Reminders on No-Shows", x = "SMS Sent", fill = "NoShow") +
theme_minimal()
rm(data)
# Step 5: Load the CSV data file into R
hospital_data <- read.csv("patients.csv", stringsAsFactors = FALSE)
# Step 5: Load the CSV data file into R
hospital_data <- read.csv("patients.csv", stringsAsFactors = FALSE)
# Step 5: Load the CSV data file into R
hospital_data <- read.csv("patients.csv", stringsAsFactors = FALSE)
setwd("C:/Users/katla/Downloads/OneDrive/Desktop/Hospital Project R")
head(hospital_data)
setwd("C:/Users/katla/Downloads/OneDrive/Desktop/Hospital Project R")
head(hospital_data)
head(hospital_data)
head(hospital_data)
hospital_data <- read.csv("patients.csv", stringsAsFactors = FALSE)
View(hospital_data)
# Convert date_admitted column to Date format
hospital_data$date_admitted <- as.Date(hospital_data$date_admitted, format = "%Y-%m-%d")
View(hospital_data)
# Convert date_admitted column to Date format
hospital_data$date_admitted <- as.Date(hospital_data$date_admitted, format = "%Y-%m-%d")
# Check structure
str(hospital_data)
install.packages("ggplot2")
install.packages("dplyr")
ggplot(hospital_data, aes(x = diagnosis)) +
geom_bar(fill = "skyblue") +
labs(title = "Diagnosis Count", x = "Diagnosis", y = "Patients")
ggplot(hospital_data, aes(x = diagnosis)) +
geom_bar(fill = "skyblue") +
labs(title = "Diagnosis Count", x = "Diagnosis", y = "Patients")
library(ggplot2)
ggplot(hospital_data, aes(x = diagnosis)) +
geom_bar(fill = "skyblue") +
labs(title = "Diagnosis Count", x = "Diagnosis", y = "Patients")
ggplot(gender_data, aes(x = "", y = Count, fill = Gender)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0) +
labs(title = "Gender Distribution")
colnames(gender_data) <- c("Gender", "Count")
ggplot(gender_data, aes(x = "", y = Count, fill = Gender)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0) +
labs(title = "Gender Distribution")
head(hospital_data)
colnames(gender_data) <- c("Gender", "Count")
ggplot(gender_data, aes(x = "", y = Count, fill = Gender)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0) +
labs(title = "Gender Distribution")
print(gender_data)
# Rename columns for clarity
colnames(gender_data) <- c("Gender", "Count")
ggplot(gender_data, aes(x = "", y = Count, fill = Gender)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0) +
labs(title = "Gender Distribution")
head(hospital_data)
# Create a table of gender counts
gender_data <- as.data.frame(table(hospital_data$gender))
View(gender_data)
# Rename columns for clarity
colnames(gender_data) <- c("Gender", "Count")
print(gender_data)
ggplot(gender_data, aes(x = "", y = Count, fill = Gender)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0) +
labs(title = "Gender Distribution")
by_date <- hospital_data %>%
group_by(date_admitted) %>%
summarise(count = n())
by_date <- hospital_data %>%
group_by(date_admitted) %>%
summarise(count = n())
by_date <- hospital_data %>%
group_by(date_admitted) %>%
summarise(count = n())
by_date <- hospital_data %>%
group_by(date_admitted) %>%
summarise(count = n())
ggplot(by_date, aes(x = date_admitted, y = count)) +
geom_line(color = "blue", size = 1.2) +
labs(title = "Admissions Over Time", x = "Date", y = "Count")
hospital_data <- read.csv("patients.csv", stringsAsFactors = FALSE)
by_date <- hospital_data %>%
group_by(date_admitted) %>%
summarise(count = n())
ggplot(by_date, aes(x = date_admitted, y = count)) +
geom_line(color = "blue", size = 1.2) +
labs(title = "Admissions Over Time", x = "Date", y = "Count")
hospital_data <- read.csv("patients.csv", stringsAsFactors = FALSE)
ggplot(by_date, aes(x = date_admitted, y = count)) +
geom_line(color = "blue", size = 1.2) +
labs(title = "Admissions Over Time", x = "Date", y = "Count")
hospital_data <- read.csv("patients.csv", stringsAsFactors = FALSE)
head(hospital_data)
str(hospital_data$date_admitted)
library(dplyr)
print(by_date)
by_date <- hospital_data %>%
group_by(date_admitted) %>%
summarise(count = n())
View(by_date)
ggplot(by_date, aes(x = date_admitted, y = count)) +
geom_line(color = "blue", size = 1.2) +
labs(title = "Admissions Over Time", x = "Date", y = "Count")
ggplot(by_date, aes(x = date_admitted, y = count)) +
geom_line(color = "blue", linewidth = 1.2) +
labs(title = "Admissions Over Time", x = "Date", y = "Count")
ggplot(by_date, aes(x = date_admitted, y = count)) +
geom_line(color = "blue", linewidth = 0.5) +
labs(title = "Admissions Over Time", x = "Date", y = "Count")
ggplot(hospital_data, aes(x = diagnosis)) +
geom_bar(fill = "skyblue") +
labs(title = "Diagnosis Count", x = "Diagnosis", y = "Patients")
head(hospital_data)
# Create a table of gender counts
gender_data <- as.data.frame(table(hospital_data$gender))
# Rename columns for clarity
colnames(gender_data) <- c("Gender", "Count")
gender_data <- as.data.frame(table(hospital_data$gender))
ggplot(by_date, aes(x = date_admitted, y = count)) +
geom_line(color = "blue", linewidth = 2.5) +
labs(title = "Admissions Over Time", x = "Date", y = "Count")
ggplot(by_date, aes(x = date_admitted, y = count)) +
geom_line(color = "blue", linewidth = 2.5) +
labs(title = "Admissions Over Time", x = "Date", y = "Count")
